# make_stub_files: Tue 03 Aug 2021 at 14:11:24
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def is_known_type(s: str) -> Any: ...
    #   0: return ReduceTypes().is_known_type(s)
    # ? 0: return ReduceTypes().is_known_type(str)
def merge_types(a1: Any, a2: Any) -> str: ...
def reduce_types(aList: List[Any], name: str=, trace: bool=) -> Any: ...
    #   0: return ReduceTypes(aList,name,trace).reduce_types()
    # ? 0: return ReduceTypes(List[Any], str, bool).reduce_types()
def dump(title: Any, s: str=) -> None: ...
def dump_dict(title: Any, d: Any) -> None: ...
def dump_list(title: Any, aList: List[Any]) -> None: ...
def main() -> None: ...
def pdb(self) -> None: ...
def truncate(s: str, n: int) -> str: ...
class AstFormatter:
    def format(self, node: Node) -> Optional[Any]: ...
    def visit(self, node: Node) -> Optional[Union[Any, str]]: ...
        #   0: return .join(self.visit(z) for z in node)
        # ? 0: return .join(self.visit(z) for z in Node)
        #   1: return
        #   1: return 
        #   2: return
        #   2: return 
        #   3: return s
        #   3: return str
    def do_ClassDef(self, node: Node) -> str: ...
    def do_FunctionDef(self, node: Node) -> str: ...
    def do_Interactive(self, node: Node) -> None: ...
    def do_Module(self, node: Node) -> str: ...
    def do_Lambda(self, node: Node) -> str: ...
    def do_Expr(self, node: Node) -> str: ...
    def do_Expression(self, node: Node) -> str: ...
    def do_GeneratorExp(self, node: Node) -> str: ...
    def do_AugLoad(self, node: Node) -> str: ...
    def do_Del(self, node: Node) -> str: ...
    def do_Load(self, node: Node) -> str: ...
    def do_Param(self, node: Node) -> str: ...
    def do_Store(self, node: Node) -> str: ...
    def do_arguments(self, node: Node) -> str: ...
    def do_arg(self, node: Node) -> str: ...
    def do_Attribute(self, node: Node) -> str: ...
    def do_Bytes(self, node: Node) -> str: ...
    def do_Call(self, node: Node) -> str: ...
    def do_keyword(self, node: Node) -> str: ...
    def do_comprehension(self, node: Node) -> str: ...
    def do_Dict(self, node: Node) -> str: ...
    def do_Ellipsis(self, node: Node) -> str: ...
    def do_ExtSlice(self, node: Node) -> str: ...
    def do_Index(self, node: Node) -> str: ...
    def do_List(self, node: Node) -> str: ...
    def do_ListComp(self, node: Node) -> str: ...
    def do_Name(self, node: Node) -> str: ...
    def do_NameConstant(self, node: Node) -> str: ...
    def do_Num(self, node: Node) -> str: ...
    def do_Repr(self, node: Node) -> str: ...
    def do_Slice(self, node: Node) -> str: ...
    def do_Str(self, node: Node) -> str: ...
    def do_Subscript(self, node: Node) -> str: ...
    def do_Tuple(self, node: Node) -> str: ...
    def do_BinOp(self, node: Node) -> str: ...
    def do_BoolOp(self, node: Node) -> str: ...
    def do_Compare(self, node: Node) -> str: ...
    def do_UnaryOp(self, node: Node) -> str: ...
    def do_IfExp(self, node: Node) -> str: ...
    def do_Assert(self, node: Node) -> str: ...
    def do_Assign(self, node: Node) -> str: ...
    def do_AugAssign(self, node: Node) -> str: ...
    def do_Break(self, node: Node) -> str: ...
    def do_Continue(self, node: Node) -> str: ...
    def do_Delete(self, node: Node) -> str: ...
    def do_ExceptHandler(self, node: Node) -> str: ...
    def do_Exec(self, node: Node) -> str: ...
    def do_For(self, node: Node) -> str: ...
    def do_Global(self, node: Node) -> str: ...
    def do_If(self, node: Node) -> str: ...
    def do_Import(self, node: Node) -> str: ...
    def get_import_names(self, node: Node) -> Any: ...
        #   0: return result
        # ? 0: return result
    def do_ImportFrom(self, node: Node) -> str: ...
    def do_Nonlocal(self, node: Node) -> str: ...
    def do_Pass(self, node: Node) -> str: ...
    def do_Print(self, node: Node) -> str: ...
    def do_Raise(self, node: Node) -> str: ...
    def do_Return(self, node: Node) -> str: ...
    def do_Starred(self, node: Node) -> str: ...
    def do_Try(self, node: Node) -> str: ...
    def do_TryExcept(self, node: Node) -> str: ...
    def do_TryFinally(self, node: Node) -> str: ...
    def do_While(self, node: Node) -> str: ...
    def do_With(self, node: Node) -> str: ...
    def do_Yield(self, node: Node) -> str: ...
    def do_YieldFrom(self, node: Node) -> str: ...
    def kind(self, node: Node) -> Any: ...
        #   0: return node.__class__.__name__
        # ? 0: return Node.__class__.__name__
    def indent(self, s: str) -> Any: ...
        #   0: return %(**self.level, s)
        # ? 0: return %Tuple[*self.level, str]
    def op_name(self, node: Node, strict: bool=) -> str: ...
class AstArgFormatter(AstFormatter):
    def do_BoolOp(self, node: Node) -> None: ...
    def do_Bytes(self, node: Node) -> None: ...
    def do_Name(self, node: Node) -> Optional[Any]: ...
    def do_Num(self, node: Node) -> None: ...
    def do_Str(self, node: Node) -> None: ...
class Controller:
    def __init__(self) -> None: ...
    def finalize(self, fn: str) -> str: ...
    def make_stub_file(self, fn: str) -> None: ...
    def run(self) -> None: ...
    def run_all_unit_tests(self) -> None: ...
    def scan_command_line(self) -> None: ...
    def scan_options(self) -> None: ...
    def make_op_name_dict(self) -> Any: ...
        #   0: return d
        # ? 0: return d
    def create_parser(self) -> Any: ...
        #   0: return parser
        # ? 0: return optparse.OptionParser
    def find_pattern_ops(self, pattern: Any) -> Union[Any, List]: ...
        #   0: return []
        #   0: return List
        #   1: return ops
        # ? 1: return ops
    def get_config_string(self) -> Optional[str]: ...
    def init_parser(self, s: str) -> None: ...
    def is_section_name(self, s: str) -> Optional[Any]:
        #   0: return s.strip().lower().replace()
        # ? 0: return str.strip().lower().replace()
        #   1: return
        #   1: return 
        #   2: return
        #   2: return
        def munge(s: str) -> Any: ...
            #   0: return s.strip().lower().replace()
            # ? 0: return str.strip().lower().replace()
    def make_patterns_dict(self) -> None: ...
    def scan_patterns(self, section_name: Any) -> List[Any]: ...
class LeoGlobals:
    class NullObject:
        def __init__(self, *args, **keys) -> None: ...
        def __call__(self, *args, **keys) -> Any: ...
            #   0: return self
            # ? 0: return self
        def __repr__(self) -> None: ...
        def __str__(self) -> None: ...
        def __bool__(self) -> None: ...
        def __nonzero__(self) -> None: ...
        def __delattr__(self, attr: Any) -> Any: ...
            #   0: return self
            # ? 0: return self
        def __getattr__(self, attr: Any) -> Any: ...
            #   0: return self
            # ? 0: return self
        def __setattr__(self, attr: Any, val: Any) -> Any: ...
            #   0: return self
            # ? 0: return self
    def _callerName(self, n: int=, files: Any=) -> Optional[Union[Any, str]]: ...
        #   0: return %(self.shortFileName(code1.co_filename), name)
        # ? 0: return %Tuple[self.shortFileName(code1.co_filename), str]
        #   1: return name
        #   1: return str
        #   2: return
        #   2: return 
        #   3: return
        #   3: return
    def caller(self, i: int=) -> Any: ...
        #   0: return self.callers(i+).split()[]
        # ? 0: return self.callers(int+).split()[]
    def callers(self, n: int=, count: Any=, excludeCaller: Any=, files: Any=) -> str: ...
    def cls(self) -> None: ...
    def execute_shell_commands(self, commands: Any, trace: bool=) -> None: ...
    def isString(self, s: str) -> Any: ...
        #   0: return isinstance(s,str)
        # ? 0: return isinstance(str, str)
        #   1: return isinstance(s,types.StringTypes)
        # ? 1: return isinstance(str, types.StringTypes)
    def isUnicode(self, s: str) -> Any: ...
        #   0: return isinstance(s,str)
        # ? 0: return isinstance(str, str)
        #   1: return isinstance(s,types.UnicodeType)
        # ? 1: return isinstance(str, types.UnicodeType)
    def objToString(self, obj: Any, indent: Any=, printCaller: Any=, tag: Any=) -> Union[Any, str]: ...
    def dictToString(self, d: Any, indent: Any=, tag: Any=) -> Optional[Union[Any, str]]: ...
    def listToString(self, obj: Any, indent: Any=, tag: Any=) -> Optional[Union[Any, str]]: ...
    def tupleToString(self, obj: Any, indent: Any=, tag: Any=) -> Optional[Union[Any, str]]: ...
    def pdb(self) -> None: ...
    def printObj(self, obj: Any, indent: Any=, printCaller: Any=, tag: Any=) -> None: ...
    def shortFileName(self, fileName: Any, n: int=) -> Union[Any, str]: ...
        #   0: return os.path.basename(fileName)
        #   0: return str
        #   1: return .join(fileName.replace().split()[-n:])
        # ? 1: return .join(fileName.replace().split()[int:])
    def splitLines(self, s: str) -> Union[Any, List]: ...
    def trace(self, *args, **keys) -> None: ...
class Pattern:
    def __init__(self, find_s: str, repl_s: str=) -> None: ...
    def __eq__(self, obj: Any) -> bool: ...
    def __ne__(self, obj: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> Any: ...
        #   0: return %(self.find_s, self.repl_s)
        # ? 0: return %Tuple[self.find_s, self.repl_s]
    def is_balanced(self) -> None: ...
    def is_regex(self) -> Any: ...
        #   0: return self.find_s.endswith()
        # ? 0: return self.find_s.endswith()
    def all_matches(self, s: str) -> List[Any]: ...
    def full_balanced_match(self, s: str, i: int) -> Optional[int]: ...
    def match_balanced(self, delim: Any, s: str, i: int) -> Union[Any, int]: ...
        #   0: return i
        #   0: return int
        #   1: return len(s)+
        # ? 1: return int+
    def match(self, s: str, trace: bool=) -> Tuple[, str]: ...
    def match_entire_string(self, s: str) -> Union[Union[Any, bool], bool]: ...
    def replace(self, m: Any, s: str) -> Any: ...
        #   0: return self.replace_balanced(s,start,end)
        # ? 0: return self.replace_balanced(str, start, end)
        #   1: return self.replace_regex(m,s)
        # ? 1: return self.replace_regex(m, str)
    def replace_balanced(self, s1: str, start: Any, end: Any) -> str: ...
    def replace_regex(self, m: Any, s: str) -> str: ...
class ReduceTypes:
    def __init__(self, aList: List[Any]=, name: str=, trace: bool=) -> None: ...
    def is_known_type(self, s: str) -> Optional[Optional[Any]]: ...
    def reduce_collection(self, aList: List[Any], kind: Any) -> str: ...
    def reduce_numbers(self, aList: List[Any]) -> List[Any]: ...
    def reduce_types(self) -> Any: ...
        #   0: return self.show()
        # ? 0: return self.show()
        #   1: return self.show(r[])
        # ? 1: return self.show(str)
        #   2: return self.show(%.join(sorted(r)))
        # ? 2: return self.show(%.join(str))
    def reduce_unknowns(self, aList: List[Any]) -> Any: ...
        #   0: return z if self.is_known_type(z) else   for z in aList
        # ? 0: return Optional[Any] for z in List[Any]
    def show(self, s: str, known: Any=) -> str: ...
    def split_types(self, s: str) -> List[Any]: ...
class Stub:
    def __init__(self, kind: Any, name: str, parent: Any=, stack: Any=) -> None: ...
    def __eq__(self, obj: Any) -> bool: ...
    def __ne__(self, obj: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> Any: ...
        #   0: return %(self.full_name, g.objToString(self.out_list))
        # ? 0: return %Tuple[self.full_name, g.objToString(self.out_list)]
    def level(self) -> int: ...
    def parents(self) -> Any: ...
        #   0: return self.full_name.split()[:-]
        # ? 0: return self.full_name.split()[:]
class StubFormatter(AstFormatter):
    def __init__(self, controller: StandAloneMakeStubFile, traverser: Any) -> None: ...
    def match_all(self, node: Node, s: str, trace: bool=) -> str: ...
    def visit(self, node: Node) -> str: ...
    def trace_visitor(self, node: Node, op: Any, s: str) -> None: ...
    def do_Attribute(self, node: Node) -> str: ...
    def do_Bytes(self, node: Node) -> str: ...
    def do_Num(self, node: Node) -> str: ...
    def do_Str(self, node: Node) -> str: ...
    def do_Dict(self, node: Node) -> str: ...
    def do_List(self, node: Node) -> str: ...
    def do_Name(self, node: Node) -> str: ...
    def do_Tuple(self, node: Node) -> str: ...
    def do_BinOp(self, node: Node) -> str: ...
    def do_BoolOp(self, node: Node) -> str: ...
    def do_Call(self, node: Node) -> str: ...
    def do_keyword(self, node: Node) -> str: ...
    def do_Compare(self, node: Node) -> str: ...
    def do_IfExp(self, node: Node) -> str: ...
    def do_Subscript(self, node: Node) -> str: ...
    def do_UnaryOp(self, node: Node) -> str: ...
    def do_Return(self, node: Node) -> str: ...
class StubTraverser(ast.NodeVisitor):
    def __init__(self, controller: StandAloneMakeStubFile) -> None: ...
    def add_stub(self, d: Any, stub: Any) -> None: ...
    def indent(self, s: str) -> Any: ...
        #   0: return %(**self.level, s)
        # ? 0: return %Tuple[*self.level, str]
    def out(self, s: str) -> None: ...
    def run(self, node: Node) -> None: ...
    def output_stubs(self, stub: Any) -> None: ...
    def output_time_stamp(self) -> None: ...
    def update(self, fn: str, new_root: Any) -> Any: ...
        #   0: return new_root
        # ? 0: return new_root
        #   1: return new_root
        # ? 1: return new_root
        #   2: return old_root
        # ? 2: return old_root
        #   3: return new_root
        # ? 3: return new_root
    def get_stub_file(self, fn: str) -> Optional[str]: ...
    def parse_stub_file(self, s: str, root_name: Any) -> Tuple[Any, Any]: ...
    def merge_stubs(self, new_stubs: Any, old_root: Any, new_root: Any, trace: bool=) -> None: ...
    def check_delete(self, new_stubs: Any, old_root: Any, new_root: Any, trace: bool) -> Any: ...
        #   0: return delete_list
        # ? 0: return delete_list
    def flatten_stubs(self, root: Any) -> List[Any]: ...
    def flatten_stubs_helper(self, root: Any, aList: List[Any]) -> None: ...
    def find_parent_stub(self, stub: Any, root: Any) -> Optional[Any]: ...
    def find_stub(self, stub: Any, root: Any) -> Optional[Any]: ...
        #   0: return root
        # ? 0: return root
        #   1: return stub2
        # ? 1: return stub2
        #   2: return
        #   2: return
    def sort_stubs_by_hierarchy(self, stubs1: Any) -> Union[Any, List]: ...
        #   0: return result
        # ? 0: return result
        #   1: return []
        #   1: return List
    def trace_stubs(self, stub: Any, aList: List[Any]=, header: Any=, level: Any=-) -> Optional[Any]: ...
        #   0: return .join(aList)+
        # ? 0: return .join(List[Any])+
        #   1: return
        #   1: return
    def visit_ClassDef(self, node: Node) -> None: ...
    def visit_FunctionDef(self, node: Node) -> None: ...
    def format_arguments(self, node: Node) -> Any: ...
        #   0: return .join(result)
        # ? 0: return .join(result)
    def munge_arg(self, s: str) -> Union[Any, str]: ...
        #   0: return s
        #   0: return str
        #   1: return %(s, pattern.repl_s)
        # ? 1: return %Tuple[str, pattern.repl_s]
        #   2: return s
        #   2: return str
        #   3: return s+
        #   3: return str
    def format_returns(self, node: Node) -> Union[Any, str]: ...
        #   0: return +tail
        # ? 0: return +tail
        #   1: return s+
        #   1: return str
        #   2: return self.format_return_expressions(node,name,raw,r)
        # ? 2: return self.format_return_expressions(Node, str, raw, r)
    def format_return_expressions(self, node: Node, name: str, raw_returns: Any, reduced_returns: Any) -> Union[Any, str]: ...
        #   0: return s+tail+results
        #   0: return str
        #   1: return +tail+results
        # ? 1: return +tail+results
        #   2: return s+tail
        #   2: return str
    def get_def_name(self, node: Node) -> str: ...
    def remove_recursive_calls(self, name: str, raw: Any, reduced: Any) -> Tuple[Any, Any]: ...
    def visit_Return(self, node: Node) -> None: ...
