# make_stub_files: Sat 07 Aug 2021 at 19:18:42
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def dump(title: Any, s: str=None) -> None: ...
def dump_dict(title: Any, d: Any) -> None: ...
def dump_list(title: Any, aList: List[Any]) -> None: ...
def finalize(fn: str) -> Any: ...
    #   0: return os.path.normpath(os.path.abspath(os.path.expanduser(fn)))
    # ? 0: return os.path.normpath(os.path.abspath(os.path.expanduser(str)))
def is_known_type(s: str) -> Any: ...
    #   0: return ReduceTypes().is_known_type(s)
    # ? 0: return ReduceTypes().is_known_type(str)
def main() -> None: ...
def reduce_types(aList: List[Any], name: str=None, trace: bool=False) -> Any: ...
    #   0: return ReduceTypes(aList, name, trace).reduce_types()
    # ? 0: return ReduceTypes(List[Any], str, bool).reduce_types()
def truncate(s: str, n: int) -> str: ...
class AstFormatter:
    def format(self, node: Node) -> Any: ...
        #   0: return val
        # ? 0: return val
    def visit(self, node: Node) -> Union[Any, str]: ...
        #   0: return ','.join(self.visit(z) for z in node)
        #   0: return str
        #   1: return 'None'
        #   1: return str
        #   2: return s
        #   2: return str
        #   3: return message
        # ? 3: return message
    def do_ClassDef(self, node: Node) -> str: ...
    def do_FunctionDef(self, node: Node) -> str: ...
    def do_Interactive(self, node: Node) -> None: ...
    def do_Module(self, node: Node) -> str: ...
    def do_Lambda(self, node: Node) -> str: ...
    def do_Expr(self, node: Node) -> str: ...
    def do_Expression(self, node: Node) -> str: ...
    def do_GeneratorExp(self, node: Node) -> str: ...
    def do_AugLoad(self, node: Node) -> str: ...
    def do_Del(self, node: Node) -> str: ...
    def do_Load(self, node: Node) -> str: ...
    def do_Param(self, node: Node) -> str: ...
    def do_Store(self, node: Node) -> str: ...
    def do_arguments(self, node: Node) -> str: ...
    def do_arg(self, node: Node) -> str: ...
    def do_Attribute(self, node: Node) -> str: ...
    def do_Bytes(self, node: Node) -> str: ...
    def do_Call(self, node: Node) -> str: ...
    def do_keyword(self, node: Node) -> str: ...
    def do_Constant(self, node: Node) -> str: ...
    def do_comprehension(self, node: Node) -> str: ...
    def do_Dict(self, node: Node) -> str: ...
    def do_Ellipsis(self, node: Node) -> str: ...
    def do_ExtSlice(self, node: Node) -> str: ...
    def do_Index(self, node: Node) -> str: ...
    def do_FormattedValue(self, node: Node) -> str: ...
    def do_JoinedStr(self, node: Node) -> str: ...
    def do_List(self, node: Node) -> str: ...
    def do_ListComp(self, node: Node) -> str: ...
    def do_Name(self, node: Node) -> str: ...
    def do_NameConstant(self, node: Node) -> str: ...
    def do_Num(self, node: Node) -> str: ...
    def do_Repr(self, node: Node) -> str: ...
    def do_Slice(self, node: Node) -> str: ...
    def do_Str(self, node: Node) -> str: ...
    def do_Subscript(self, node: Node) -> str: ...
    def do_Tuple(self, node: Node) -> str: ...
    def do_BinOp(self, node: Node) -> str: ...
    def do_BoolOp(self, node: Node) -> str: ...
    def do_Compare(self, node: Node) -> str: ...
    def do_UnaryOp(self, node: Node) -> str: ...
    def do_IfExp(self, node: Node) -> str: ...
    def do_Assert(self, node: Node) -> str: ...
    def do_Assign(self, node: Node) -> str: ...
    def do_AugAssign(self, node: Node) -> str: ...
    def do_Break(self, node: Node) -> str: ...
    def do_Continue(self, node: Node) -> str: ...
    def do_Delete(self, node: Node) -> str: ...
    def do_ExceptHandler(self, node: Node) -> str: ...
    def do_Exec(self, node: Node) -> str: ...
    def do_For(self, node: Node) -> str: ...
    def do_Global(self, node: Node) -> str: ...
    def do_If(self, node: Node) -> str: ...
    def do_Import(self, node: Node) -> str: ...
    def get_import_names(self, node: Node) -> Any: ...
        #   0: return result
        # ? 0: return result
    def do_ImportFrom(self, node: Node) -> str: ...
    def do_Nonlocal(self, node: Node) -> str: ...
    def do_Pass(self, node: Node) -> str: ...
    def do_Print(self, node: Node) -> str: ...
    def do_Raise(self, node: Node) -> str: ...
    def do_Return(self, node: Node) -> str: ...
    def do_Starred(self, node: Node) -> str: ...
    def do_Try(self, node: Node) -> str: ...
    def do_TryExcept(self, node: Node) -> str: ...
    def do_TryFinally(self, node: Node) -> str: ...
    def do_While(self, node: Node) -> str: ...
    def do_With(self, node: Node) -> str: ...
    def do_Yield(self, node: Node) -> str: ...
    def do_YieldFrom(self, node: Node) -> str: ...
    def kind(self, node: Node) -> Any: ...
        #   0: return node.__class__.__name__
        # ? 0: return Node.__class__.__name__
    def indent(self, s: str) -> str: ...
    def op_name(self, node: Node, strict: bool=True) -> str: ...
class AstArgFormatter(AstFormatter):
    def do_Constant(self, node: Node) -> Union[Any, str]: ...
    def do_BoolOp(self, node: Node) -> str: ...
    def do_Bytes(self, node: Node) -> str: ...
    def do_Name(self, node: Node) -> Union[Any, str]: ...
    def do_Num(self, node: Node) -> str: ...
    def do_Str(self, node: Node) -> str: ...
class Controller:
    def __init__(self) -> None: ...
    def make_stub_file(self, fn: str) -> None: ...
    def scan_command_line(self) -> None: ...
    def scan_options(self) -> None: ...
    def make_op_name_dict(self) -> Any: ...
        #   0: return d
        # ? 0: return d
    def create_parser(self) -> Any: ...
        #   0: return parser
        # ? 0: return optparse.OptionParser
    def find_pattern_ops(self, pattern: Any) -> Union[Any, List]: ...
        #   0: return []
        #   0: return List
        #   1: return ops
        # ? 1: return ops
    def get_config_string(self) -> Union[Any, str]: ...
        #   0: return f.read()
        # ? 0: return f.read()
        #   1: return ''
        #   1: return str
    def init_parser(self, s: str) -> None: ...
    def is_section_name(self, s: str) -> Union[Any, bool]:
        #   0: return s.strip().lower().replace(' ', '')
        # ? 0: return str.strip().lower().replace(str, str)
        #   1: return True
        #   1: return bool
        #   2: return False
        #   2: return bool
        def munge(s: str) -> Any: ...
            #   0: return s.strip().lower().replace(' ', '')
            # ? 0: return str.strip().lower().replace(str, str)
    def make_patterns_dict(self) -> None: ...
    def scan_patterns(self, section_name: Any) -> List[Any]: ...
class LeoGlobals:
    class NullObject:
        def __init__(self, *args, **keys) -> None: ...
        def __call__(self, *args, **keys) -> Any: ...
            #   0: return self
            # ? 0: return self
        def __repr__(self) -> str: ...
        def __str__(self) -> str: ...
        def __bool__(self) -> bool: ...
        def __nonzero__(self) -> int: ...
        def __delattr__(self, attr: Any) -> Any: ...
            #   0: return self
            # ? 0: return self
        def __getattr__(self, attr: Any) -> Any: ...
            #   0: return self
            # ? 0: return self
        def __setattr__(self, attr: Any, val: Any) -> Any: ...
            #   0: return self
            # ? 0: return self
    def _callerName(self, n: int=1, files: Any=False) -> str: ...
    def caller(self, i: int=1) -> Any: ...
        #   0: return self.callers(i+1).split(',')[0]
        # ? 0: return self.callers(int).split(str)[int]
    def callers(self, n: int=4, count: Any=0, excludeCaller: Any=True, files: Any=False) -> str: ...
    def cls(self) -> None: ...
    def execute_shell_commands(self, commands: Any, trace: bool=False) -> None: ...
    def isString(self, s: str) -> Any: ...
        #   0: return isinstance(s, str)
        # ? 0: return isinstance(str, str)
        #   1: return isinstance(s, types.StringTypes)
        # ? 1: return isinstance(str, types.StringTypes)
    def isUnicode(self, s: str) -> Any: ...
        #   0: return isinstance(s, str)
        # ? 0: return isinstance(str, str)
        #   1: return isinstance(s, types.UnicodeType)
        # ? 1: return isinstance(str, types.UnicodeType)
    def objToString(self, obj: Any, indent: Any='', printCaller: Any=False, tag: Any=None) -> str: ...
    def dictToString(self, d: Any, indent: Any='', tag: Any=None) -> str: ...
    def listToString(self, obj: Any, indent: Any='', tag: Any=None) -> str: ...
    def tupleToString(self, obj: Any, indent: Any='', tag: Any=None) -> str: ...
    def pdb(self) -> None: ...
    def printObj(self, obj: Any, indent: Any='', printCaller: Any=False, tag: Any=None) -> None: ...
    def shortFileName(self, fileName: Any, n: int=None) -> str: ...
    def splitLines(self, s: str) -> Union[Any, List]: ...
    def trace(self, *args, **keys) -> None: ...
class Pattern:
    def __init__(self, find_s: str, repl_s: str='') -> None: ...
    def __eq__(self, obj: Any) -> bool: ...
    def __ne__(self, obj: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def is_balanced(self) -> bool: ...
    def is_regex(self) -> Any: ...
        #   0: return self.find_s.endswith('$')
        # ? 0: return self.find_s.endswith(str)
    def all_matches(self, s: str) -> List[Any]: ...
    def full_balanced_match(self, s: str, i: int) -> Optional[int]: ...
    def match_balanced(self, delim: Any, s: str, i: int) -> int: ...
    def match(self, s: str, trace: bool=False) -> Tuple[bool, str]: ...
    def match_entire_string(self, s: str) -> Union[Union[Any, bool], bool]: ...
    def replace(self, m: Any, s: str) -> Any: ...
        #   0: return self.replace_balanced(s, start, end)
        # ? 0: return self.replace_balanced(str, start, end)
        #   1: return self.replace_regex(m, s)
        # ? 1: return self.replace_regex(m, str)
    def replace_balanced(self, s1: str, start: Any, end: Any) -> str: ...
    def replace_regex(self, m: Any, s: str) -> str: ...
class ReduceTypes:
    def __init__(self, aList: List[Any]=None, name: str=None, trace: bool=False) -> None: ...
    def is_known_type(self, s: str) -> Union[Union[Any, bool], bool]: ...
    def reduce_collection(self, aList: List[Any], kind: Any) -> str: ...
    def reduce_numbers(self, aList: List[Any]) -> List[Any]: ...
    def reduce_types(self) -> Any: ...
        #   0: return self.show('None')
        # ? 0: return self.show(str)
        #   1: return self.show(r[0])
        # ? 1: return self.show(str)
        #   2: return self.show('Union[%s]'%', '.join(sorted(r)))
        # ? 2: return self.show(str)
    def reduce_unknowns(self, aList: List[Any]) -> Any: ...
        #   0: return z if self.is_known_type(z) else 'Any'  for z in aList
        # ? 0: return Union[Any, str] for z in List[Any]
    def show(self, s: str, known: Any=True) -> str: ...
    def split_types(self, s: str) -> List[Any]: ...
class Stub:
    def __init__(self, kind: Any, name: str, parent: Any=None, stack: Any=None) -> None: ...
    def __eq__(self, obj: Any) -> bool: ...
    def __ne__(self, obj: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def level(self) -> int: ...
    def parents(self) -> Any: ...
        #   0: return self.full_name.split('.')[:-1]
        # ? 0: return self.full_name.split(str)[:-int]
class StubFormatter(AstFormatter):
    def __init__(self, controller: StandAloneMakeStubFile, traverser: Any) -> None: ...
    def match_all(self, node: Node, s: str, trace: bool=False) -> str: ...
    def trace_visitor(self, node: Node, op: Any, s: str) -> None: ...
    def do_Attribute(self, node: Node) -> str: ...
    def do_Constant(self, node: Node) -> str: ...
    def do_Bytes(self, node: Node) -> str: ...
    def do_Num(self, node: Node) -> str: ...
    def do_Str(self, node: Node) -> str: ...
    def do_Dict(self, node: Node) -> str: ...
    def do_List(self, node: Node) -> str: ...
    def do_Name(self, node: Node) -> str: ...
    def do_Tuple(self, node: Node) -> str: ...
    def do_BinOp(self, node: Node) -> str: ...
    def do_BoolOp(self, node: Node) -> str: ...
    def do_Compare(self, node: Node) -> str: ...
    def do_IfExp(self, node: Node) -> str: ...
    def do_Subscript(self, node: Node) -> str: ...
    def do_UnaryOp(self, node: Node) -> str: ...
    def do_Call(self, node: Node) -> str: ...
    def do_Return(self, node: Node) -> str: ...
class StubTraverser(ast.NodeVisitor):
    def __init__(self, controller: StandAloneMakeStubFile) -> None: ...
    def add_stub(self, d: Any, stub: Any) -> None: ...
    def indent(self, s: str) -> str: ...
    def out(self, s: str) -> None: ...
    def run(self, node: Node) -> None: ...
    def output_stubs(self, stub: Any) -> None: ...
    def output_time_stamp(self) -> None: ...
    def update(self, fn: str, new_root: Any) -> Any: ...
        #   0: return new_root
        # ? 0: return new_root
        #   1: return new_root
        # ? 1: return new_root
        #   2: return old_root
        # ? 2: return old_root
        #   3: return new_root
        # ? 3: return new_root
    def get_stub_file(self, fn: str) -> Optional[str]: ...
    def parse_stub_file(self, s: str, root_name: Any) -> Tuple[Any, Any]: ...
    def merge_stubs(self, new_stubs: Any, old_root: Any, new_root: Any, trace: bool=False) -> None: ...
    def check_delete(self, new_stubs: Any, old_root: Any, new_root: Any, trace: bool) -> Any: ...
        #   0: return delete_list
        # ? 0: return delete_list
    def flatten_stubs(self, root: Any) -> List[Any]: ...
    def flatten_stubs_helper(self, root: Any, aList: List[Any]) -> None: ...
    def find_parent_stub(self, stub: Any, root: Any) -> Optional[Any]: ...
    def find_stub(self, stub: Any, root: Any) -> Optional[Any]: ...
        #   0: return root
        # ? 0: return root
        #   1: return stub2
        # ? 1: return stub2
        #   2: return None
        #   2: return None
    def sort_stubs_by_hierarchy(self, stubs1: Any) -> Union[Any, List]: ...
        #   0: return result
        # ? 0: return result
        #   1: return []
        #   1: return List
    def trace_stubs(self, stub: Any, aList: List[Any]=None, header: Any=None, level: Any=-1) -> str: ...
    def visit_ClassDef(self, node: Node) -> None: ...
    def visit_FunctionDef(self, node: Node) -> None: ...
    def format_arguments(self, node: Node) -> str: ...
    def munge_arg(self, s: str) -> str: ...
    def format_returns(self, node: Node) -> Union[Any, str]: ...
        #   0: return 'None'+tail
        #   0: return str
        #   1: return s+': ...'
        #   1: return str
        #   2: return self.format_return_expressions(node, name, raw, r)
        # ? 2: return self.format_return_expressions(Node, str, raw, r)
    def format_return_expressions(self, node: Node, name: str, raw_returns: Any, reduced_returns: Any) -> str: ...
    def get_def_name(self, node: Node) -> str: ...
    def remove_recursive_calls(self, name: str, raw: Any, reduced: Any) -> Tuple[Any, Any]: ...
    def visit_Return(self, node: Node) -> None: ...
class TestMakeStubFiles(unittest.TestCase):
    def test_bug2_empty(self) -> None: ...
    def test_bug2_non_empty(self) -> None: ...
    def test_bug3(self) -> None: ...
    def test_ast_formatter_class(self) -> None: ...
    def test_ast_arg_formatter_class(self) -> None: ...
    def test_ast_formatter_class_on_file(self) -> None: ...
    def test_reduce_numbers(self) -> None: ...
    def test_reduce_types(self) -> None: ...
    def test_split_types(self) -> None: ...
    def test_pattern_class(self) -> None: ...
    def test_stub_class(self) -> None: ...
    def test_stub_formatter_class(self) -> None: ...
    def test_st_find(self) -> None: ...
    def test_st_flatten_stubs(self) -> None: ...
    def test_st_merge_stubs(self) -> None: ...
    def test_file_msb(self) -> None: ...
    def test_finalize(self) -> None: ...
    def test_is_known_type(self) -> None: ...
    def test_truncate(self) -> None: ...
